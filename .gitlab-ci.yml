stages:
  - lint
  - build
  - test
  - deploy

# Use base image for node
image: node:14-alpine

# Linting stage
eslint:
  stage: lint
  script:
    # install eslint
    - yarn add eslint eslint-plugin-react babel-eslint
    # Run eslint module
    - node_modules/eslint/bin/eslint.js .

# Build General Stage
build-general:
  stage: build
  # Install production dependecies
  before_script:
    - yarn install --prod
  # Build application
  script:
    - yarn build
  # Save the generated artifact
  artifacts:
    expire_in: 1 week
    paths:
      - build
  except:
    - master
    - uat
    - production

# Build QA Stage
build-qa:
  stage: build
  # Install production dependecies
  before_script:
    - yarn install --prod
  # Build application
  script:
    - REACT_APP_STAGE=qa yarn build
  # Save the generated artifact
  artifacts:
    expire_in: 1 week
    paths:
      - build
  only:
    - master

# Build UAT Stage
build-uat:
  stage: build
  # Install production dependecies
  before_script:
    - yarn install --prod
  # Build application
  script:
    - REACT_APP_STAGE=uat yarn build
  # Save the generated artifact
  artifacts:
    expire_in: 1 week
    paths:
      - build
  only:
    - uat

# Build PROD Stage
build-prod:
  stage: build
  # Install production dependecies
  before_script:
    - yarn install --prod
  # Build application
  script:
    - REACT_APP_STAGE=production yarn build
  # Save the generated artifact
  artifacts:
    expire_in: 1 week
    paths:
      - build
  only:
    - production
    - tags

# Test Stage
test:
  stage: test
  # Install all dependencies
  before_script:
    - yarn install
  # Run tests
  script:
    - yarn run test

# QA Deployment Stage
deploy-qa:
  stage: deploy
  # Use AWS base image
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  # Set necessary credentials and bucket names
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_QA
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_QA
    - export S3_BUCKET=$S3_BUCKET_QA
    - export DISTRIBUTION_ID=$DISTRIBUTION_ID_QA
  # Sync the generated build folder to S3 Bucket
  script:
    - aws s3 sync build $S3_BUCKET --region $AWS_REGION --acl public-read --cache-control="max-age=86400"
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
  # Run only for master branch manually
  only:
    - master
  when: manual

# UAT Deployment Stage
deploy-uat:
  stage: deploy
  # Use AWS base image
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  # Set necessary credentials and bucket names
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_UAT
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_UAT
    - export S3_BUCKET=$S3_BUCKET_UAT
    - export DISTRIBUTION_ID=$DISTRIBUTION_ID_UAT
  # Sync the generated build folder to S3 Bucket
  script:
    - aws s3 sync build $S3_BUCKET --region $AWS_REGION --acl public-read --cache-control="max-age=86400"
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
  # Run only for staging branch manually
  only:
    - uat
  when: manual

# Production Deployment Stage
deploy-production:
  stage: deploy
  # Use AWS base image
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  # Set necessary credentials and bucket names
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
    - export S3_BUCKET=$S3_BUCKET_PROD
    - export DISTRIBUTION_ID = $DISTRIBUTION_ID_PROD
  # Sync the generated build folder to S3 Bucket
  script:
    - aws s3 sync build $S3_BUCKET --region $AWS_REGION
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
  # Run only for prodcution branch and tags manually
  only:
    - production
    - tags
  when: manual
